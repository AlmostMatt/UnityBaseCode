//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace UnityBaseCode
{
	namespace Statuses
	{
		public class StatusMap : MonoBehaviour
        {
            // TODO: consider just mapping state -> duration and state -> callbacks
			private Dictionary<State, Status> _statusMap = new Dictionary<State, Status>();

            // TODO: consider Update vs FixedUpdate, and maybe make it configurable
			public void FixedUpdate() {
				List<State> expired = new List<State>();
				foreach (Status s in _statusMap.Values) {
					s.duration -= Time.fixedDeltaTime;
					if (s.duration <= 0) {
						s.Expire(gameObject);
						expired.Add(s.type);
					}
				}
				foreach(State state in expired) {
                    _statusMap.Remove(state);
				}
			}

            // TODO: support multiple statuses of the same type and either merge, extend, stack, or overlap strategies
            // TODO: take State directly instead of taking Status
            // TODO: add arguments for begin / update / end delegates
            public void Add(Status s, float duration) {
				if (Has(s.type)) {
                    _statusMap[s.type].duration += duration;
				} else {
					s.duration = duration;
                    _statusMap[s.type] = s;
					s.Begin(gameObject);
				}
			}
			
			public void Remove(State s) {
				if (Has(s)) {
                    _statusMap[s].Expire(gameObject);
                    _statusMap.Remove(s);
				}
			}

			public bool Has(State st) {
				return (_statusMap.ContainsKey(st));
			}

			// this assumes the status exists
			public float GetDuration(State st) {
				return _statusMap[st].duration;
			}
		}
	}
}